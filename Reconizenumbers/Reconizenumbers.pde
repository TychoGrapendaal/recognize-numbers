import java.util.Arrays;
import java.util.Scanner;

NeuralNetwork nn = new NeuralNetwork(784, 1, 784, 10);
Button[] buttons = new Button[12];
double[][] target = new double[10][10];
double[] input = new double[784];
        



int resize = 15;

void setup() {
  for (int i = 0; i < 5; i++) {
    buttons[i] = new Button(i*165+10,450,150,150, color(255,255,255), (""+i));
  }
  for (int i = 0; i < 5; i++) {
    buttons[i+5] = new Button(i*165+10,615,150,150, color(255,255,255), (""+(i+5)));
  }
  buttons[10] = new Button(28 * resize + 10,100,195,70, color(255,255,255), ("SAVE"));
  buttons[11] = new Button(28 * resize + 10,300,195,70, color(255,255,255), ("CLEAR"));
  for (int i = 0; i < target.length; i++) {
      for (int j = 0; j < target[0].length; j++) {
          target[i][j] = 0;
          if (i==j) {
              target[i][j] = 1;
          }
      }
  }
  size(840,1240);
  background(0);
  loadPixels();
  
  try {
    String[] s = loadStrings("good.txt");
    StringBuilder neural = new StringBuilder();
    for (String value : s) {
        neural.append(value);
        neural.append("\n");
    }
    nn = NeuralNetwork.readNN(new Scanner(neural.toString()));
    //System.out.println(nn);
  } catch (Exception e) {
    e.printStackTrace();
    PrintWriter file = createWriter("good.txt"); 
    file.println(nn.toString());
    file.flush();
    file.close();
    
  }
  
  
}

//int a = 0;

void draw() {
  loadPixels();
  
  noStroke();
  fill(0);
  rect(0, height-400, width,height-400);
  stroke(255);
  
  //a++;
  
  strokeWeight(1);
  line(0, 0, 28*resize, 0);
  line(28*resize, 0, 28*resize, 28*resize);
  line(28*resize, 28*resize, 0, 28*resize);
  line(0, 28*resize, 0, 0);
  for (Button b: buttons) {
    b.show();
  }
  
  //if(a==1000) System.out.println("-------------------------------------------------------------");
  
  for (int i = 0; i < 28*resize; i+=resize) {
      for (int j = 0; j < 28*resize; j+=resize) {
        double sum = 0;
        for (int k = 0; k < resize; k++) {
          for (int m = 0; m < resize; m++) {
            sum += getAvaragePixel(pixels[(j+k)*width+i+m]);
            //pixels[(i+k)*width+j+m] = color(255);
          }
        }
        sum *= (1.0/(resize * resize));
        input[(j/resize)*28 + i/resize] = sum;
        //if (a==1000) System.out.println(sum);
      }
  }
  try {
    //System.out.println(Arrays.toString(input));
    //input = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011764705882352941, 0.00784313725490196, 0.011764705882352941, 0.00392156862745098, 0.0, 0.0, 0.054901960784313725, 0.0, 0.0, 0.050980392156862744, 0.0, 0.027450980392156862, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.047058823529411764, 0.058823529411764705, 0.027450980392156862, 0.0, 0.0, 0.0, 0.00784313725490196, 0.050980392156862744, 0.0, 0.0, 0.03137254901960784, 0.0, 0.0, 0.0, 0.023529411764705882, 0.027450980392156862, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03137254901960784, 0.03137254901960784, 0.0, 0.0, 0.023529411764705882, 0.023529411764705882, 0.03137254901960784, 0.0, 0.058823529411764705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011764705882352941, 0.0196078431372549, 0.027450980392156862, 0.01568627450980392, 0.0, 0.0, 0.0, 0.00392156862745098, 0.011764705882352941, 0.0, 0.0, 0.043137254901960784, 0.0, 0.10196078431372549, 0.0, 0.047058823529411764, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011764705882352941, 0.0, 0.0, 0.0196078431372549, 0.0, 0.011764705882352941, 0.03137254901960784, 0.0, 0.01568627450980392, 0.0, 0.0, 0.10588235294117647, 0.00392156862745098, 0.0, 0.07450980392156863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03137254901960784, 0.0, 0.00392156862745098, 0.01568627450980392, 0.0, 0.00392156862745098, 0.03529411764705882, 0.0, 0.0, 0.047058823529411764, 0.03529411764705882, 0.0, 0.0, 0.00784313725490196, 0.00392156862745098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03137254901960784, 0.011764705882352941, 0.0, 0.0392156862745098, 0.00784313725490196, 0.0, 0.0, 0.00784313725490196, 0.0, 0.00784313725490196, 0.03529411764705882, 0.11372549019607843, 0.9568627450980393, 0.11764705882352941, 0.023529411764705882, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00392156862745098, 0.0, 0.2784313725490196, 0.807843137254902, 0.796078431372549, 0.30196078431372547, 0.0, 0.0196078431372549, 0.00784313725490196, 0.0, 0.0, 0.0, 0.596078431372549, 0.7803921568627451, 0.023529411764705882, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12549019607843137, 0.7333333333333333, 0.9921568627450981, 1.0, 0.8470588235294118, 0.08235294117647059, 0.0, 0.01568627450980392, 0.027450980392156862, 0.0, 0.00392156862745098, 0.1411764705882353, 0.9411764705882353, 0.21176470588235294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.058823529411764705, 0.0, 0.6509803921568628, 0.9725490196078431, 1.0, 1.0, 0.9215686274509803, 0.6901960784313725, 0.058823529411764705, 0.0, 0.0, 0.0, 0.10196078431372549, 0.027450980392156862, 0.5686274509803921, 0.27450980392156865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2823529411764706, 0.9450980392156862, 0.9333333333333333, 0.6196078431372549, 0.15294117647058825, 1.0, 0.8901960784313725, 0.1803921568627451, 0.0, 0.00784313725490196, 0.023529411764705882, 0.0, 0.0, 0.2627450980392157, 0.1607843137254902, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12156862745098039, 0.5725490196078431, 0.8862745098039215, 1.0, 0.6078431372549019, 0.0392156862745098, 0.4392156862745098, 1.0, 0.6078431372549019, 0.043137254901960784, 0.0392156862745098, 0.0392156862745098, 0.0, 0.1607843137254902, 0.7803921568627451, 0.611764705882353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.21568627450980393, 1.0, 0.1450980392156863, 0.6470588235294118, 1.0, 0.0196078431372549, 0.13725490196078433, 1.0, 1.0, 0.12941176470588237, 0.0, 0.0, 0.043137254901960784, 0.12941176470588237, 0.9882352941176471, 0.6784313725490196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16862745098039217, 0.7568627450980392, 0.08235294117647059, 0.9372549019607843, 0.4980392156862745, 0.00392156862745098, 0.12941176470588237, 0.8196078431372549, 0.9764705882352941, 0.6, 0.07058823529411765, 0.03137254901960784, 0.0, 0.29411764705882354, 0.9568627450980393, 0.6901960784313725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08235294117647059, 0.2196078431372549, 0.8666666666666667, 0.48627450980392156, 0.0, 0.0, 0.6705882352941176, 1.0, 1.0, 0.16862745098039217, 0.00784313725490196, 0.18823529411764706, 0.8470588235294118, 0.9686274509803922, 0.39215686274509803, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.023529411764705882, 0.0, 0.6941176470588235, 1.0, 0.21568627450980393, 0.0, 0.023529411764705882, 0.3215686274509804, 0.9058823529411765, 1.0, 0.6078431372549019, 0.27450980392156865, 0.8392156862745098, 1.0, 0.9333333333333333, 0.14901960784313725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06274509803921569, 0.8862745098039215, 1.0, 0.027450980392156862, 0.00784313725490196, 0.0, 0.0, 0.6313725490196078, 0.9568627450980393, 1.0, 0.984313725490196, 1.0, 0.8666666666666667, 0.3137254901960784, 0.011764705882352941, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011764705882352941, 0.32941176470588235, 0.9098039215686274, 0.9764705882352941, 0.050980392156862744, 0.027450980392156862, 0.01568627450980392, 0.050980392156862744, 0.0, 0.43137254901960786, 0.8901960784313725, 0.9686274509803922, 0.7490196078431373, 0.3568627450980392, 0.01568627450980392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7176470588235294, 0.984313725490196, 0.6980392156862745, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.07450980392156863, 0.10588235294117647, 0.0196078431372549, 0.0, 0.0, 0.01568627450980392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20784313725490197, 0.9803921568627451, 1.0, 0.5019607843137255, 0.043137254901960784, 0.0, 0.011764705882352941, 0.0392156862745098, 0.0, 0.0, 0.0392156862745098, 0.043137254901960784, 0.0, 0.01568627450980392, 0.0196078431372549, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20784313725490197, 0.996078431372549, 0.996078431372549, 0.07450980392156863, 0.0, 0.011764705882352941, 0.023529411764705882, 0.0, 0.011764705882352941, 0.0, 0.00392156862745098, 0.0, 0.0, 0.043137254901960784, 0.01568627450980392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5137254901960784, 0.9803921568627451, 0.796078431372549, 0.0, 0.054901960784313725, 0.0, 0.0, 0.0392156862745098, 0.00392156862745098, 0.00784313725490196, 0.027450980392156862, 0.00392156862745098, 0.023529411764705882, 0.01568627450980392, 0.0, 0.03529411764705882, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6862745098039216, 1.0, 0.5450980392156862, 0.0, 0.011764705882352941, 0.023529411764705882, 0.0, 0.0, 0.011764705882352941, 0.0, 0.0, 0.0, 0.011764705882352941, 0.0, 0.0, 0.03529411764705882, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6941176470588235, 0.9333333333333333, 0.20392156862745098, 0.011764705882352941, 0.0, 0.0, 0.0, 0.01568627450980392, 0.011764705882352941, 0.0, 0.0196078431372549, 0.0, 0.0, 0.023529411764705882, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.45098039215686275, 1.0, 0.16862745098039217, 0.027450980392156862, 0.0, 0.0, 0.0, 0.00392156862745098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1843137254901961, 0.6, 0.07058823529411765, 0.023529411764705882, 0.0, 0.0196078431372549, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09803921568627451, 0.0, 0.011764705882352941, 0.0, 0.023529411764705882, 0.0, 0.00392156862745098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00392156862745098, 0.0, 0.0, 0.0, 0.0, 0.00784313725490196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}; 
    Matrix  m = Matrix.fromArray(nn.predict(input));
    m.normalize();
    double num = 0;
    int numIndex = 0;
    double[] output = m.toArray();
    for (int i = 0; i < output.length; i++) {
      if (output[i] > num) {
        num = output[i];
        numIndex = i;
      }
    }
    textSize(50);
    fill(255);
    text(("NN says: " + numIndex), 200, 970);
    //System.out.println("NN says: " + numIndex);
  } catch (Exception e) {
    e.printStackTrace();
  }
  
  //if (keyPressed) {
  //  background(0);
  //  //scaleDown(input);
  //}
  
  
}

void scaleDown(double[] input) {
  
  loadPixels();
    background(0);
    for (int i = 0; i < 28; i++) {
      for (int j = 0; j < 28; j++) {
        pixels[i*width+j] = color((int) Math.round(input[i*28+j]*255));
      }
    }
    
  updatePixels();
}

double getAvaragePixel(color c) {
  int red = (c>> 16 & 0xFF);
  int green = (c>> 8 & 0xFF);
  int blue = (c & 0xFF);
  
  return (red + green + blue)/(765);
  
}

void mouseDragged() {
  stroke(255);
  strokeWeight(30);
  line(pmouseX,pmouseY,mouseX,mouseY);
}

void mouseReleased() {
  for (int i = 0; i< 10; i++) {
    buttons[i].show();
    if (buttons[i].hit(mouseX,mouseY)) {
      System.out.println(i);
      try {
        nn.train(input, target[i]);
      } catch (Exception e) {
        e.printStackTrace();
      }
      background(0);
    }
  }
  if (buttons[10].hit(mouseX, mouseY)) {
      PrintWriter file = createWriter("good.txt"); 
      file.println(nn.toString());
      file.flush();
      file.close();
  }
  if (buttons[11].hit(mouseX, mouseY)) {
      background(0);
  }
}
